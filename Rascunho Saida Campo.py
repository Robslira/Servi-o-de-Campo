import pandas as pd
import pywhatkit as kit
import pyautogui
import time
from datetime import datetime

# Exemplo de hor√°rio
horario = "08:30:00"

# Converter o hor√°rio para o formato desejado
horario_formatado = datetime.strptime(horario, "%H:%M:%S").strftime("%H:%M")

print(horario_formatado)  # Sa√≠da: 08:45

# Caminho do arquivo Excel
caminho_arquivo = "Saida_Campo.xlsx"

# Ler o arquivo Excel e remover espa√ßos extras dos nomes das colunas
df = pd.read_excel(caminho_arquivo, sheet_name="Planilha1")
df.columns = df.columns.str.strip()


# Lista de destinat√°rios que n√£o devem receber lembretes
ignorar_destinatarios = [ "Maria Alcantara", "Anizio Arruda", "America Ferreira", "Rosalina Jesus",
                          "Sinomar Marcelino", "Genoveva Miranda", "Luzia Oliveira", "Maria Oliveira",                         
                          "Deyvison Silva", "Kalleb Soares", "Edna Silva","Diego Souza", "Francinete Moura",
                          "Gabrielly Souza", "Rubia Santos", "Thais Soares", "Fernanda Lima", "Rian Moraes",
                          "Sabrina Magalhaes", "Divina Damiao","Elaine Martins","Emily Silva","Lucilene Rosa",                          "Samyrah Oliveira","Sthefany Martins","Dayana Alves","Rejane Arantes","Rennan Monteiro",
                          "Rosa Marcelino", "Thais Souza", "Leni Miranda","Luciana Rodrigues","Marco Aurelio",
                          "Sarah Oliveira","Adriele Barreto","Alzerino Santos","Antonio Rosa","Dennis Damiao",
                          "Ivo Soares","Neuza Bastos","Rejane Arantes","Rennan Monteiro"]

                          
# Exibir as primeiras linhas do DataFrame para verificar os dados
# Listar as colunas dispon√≠veis para verificar a estrutura do DataFrame
print("Colunas do DataFrame ap√≥s ajustes:", df.columns.tolist())

# Converter as colunas de data para o formato datetime e tratar erros
df['data1'] = pd.to_datetime(df['data1'], format="%d/%m/%Y", errors='coerce')
df['data2'] = pd.to_datetime(df['data2'], format="%d/%m/%Y", errors='coerce')

# Dicion√°rio para traduzir os dias da semana
dias_semana = { 
                    "Monday": "segunda-feira",
                    "Tuesday": "ter√ßa-feira",
                    "Wednesday": "quarta-feira",
                    "Thursday": "quinta-feira",
                    "Friday": "sexta-feira",
                    "Saturday": "s√°bado",
                    "Sunday": "domingo"}

# Fun√ß√£o para ajustar o formato do n√∫mero de telefone
def ajustar_telefone(numero):
    if pd.isna(numero):  # Verifica se o valor √© nulo ou NaN
        return None  # Retorna None para valores ausentes
    numero = str(numero).replace(" ", "").replace("-", "").replace("(", "").replace(")", "")
    if not numero.startswith("+55"):  # Adicionar o c√≥digo do Brasil se n√£o estiver presente
        return f"+55{numero}"
    return numero

# Aplicar o ajuste de telefone na coluna 'celular'
df['celular'] = df['celular'].apply(ajustar_telefone)

# Iterar pelas linhas do DataFrame e processar os dados
for _, row in df.iterrows():
    try:
        # Ler o perfil e garantir valor padr√£o
        perfil = row.get("Perfil", None)
        if pd.isna(perfil) or perfil not in ["Irm√£o", "Irm√£", "Estudante"]:
            perfil = "Perfil n√£o especificado"

        # Ler o nome e n√∫mero de celular
        nome = row.get("nome", "Participante")
        celular = row.get("celular", None)

        # Pular caso o nome esteja na lista de destinat√°rios a serem ignorados
        if nome in ignorar_destinatarios:
            print(f"Lembrete n√£o ser√° enviado para {nome}. Pulando.")
            continue

        # Pular caso o n√∫mero de celular esteja ausente
        if not celular:
            print(f"N√∫mero de celular ausente para {perfil} {nome}. Pulando.")
            continue

        # Obter informa√ß√µes do primeiro local
        if not pd.isna(row['data1']):
            dia_semana1 = row['data1'].strftime("%A")
            dia_semana_pt1 = dias_semana.get(dia_semana1, "Dia n√£o especificado")
            data1 = row['data1'].strftime(f"%d/%m/%Y ({dia_semana_pt1})")
            local1 = row.get('local1', 'Local n√£o especificado')
            endereco1 = row.get('endere√ßo1', 'Endere√ßo n√£o informado')
            bairro1 = row.get('bairro1', 'Bairro n√£o especificado')
            horario1 = row.get('horario1', 'Hor√°rio n√£o especificado')
            campanha1 = row.get('campanha1', 'Campanha n√£o especificada')
        else:
            data1, local1, endereco1, bairro1, horario1, campanha1 = [None] * 6

        # Obter informa√ß√µes do segundo local
        if not pd.isna(row['data2']):
            dia_semana2 = row['data2'].strftime("%A")
            dia_semana_pt2 = dias_semana.get(dia_semana2, "Dia n√£o especificado")
            data2 = row['data2'].strftime(f"%d/%m/%Y ({dia_semana_pt2})")
            local2 = row.get('local2', 'Local n√£o especificado')
            endereco2 = row.get('endere√ßo2', 'Endere√ßo n√£o informado')
            bairro2 = row.get('bairro2', 'Bairro n√£o especificado')
            horario2 = row.get('horario2', 'Hor√°rio n√£o especificado')
            campanha2 = row.get('campanha2', 'Campanha n√£o especificada')
        else:
            data2, local2, endereco2, bairro2, horario2, campanha2 = [None] * 6

        # Criar a mensagem consolidada com 'Perfil' antes do nome
        mensagem = f"Ol√° {perfil},\n {nome},\ntudo bem? üòä\n\nEste √© um lembrete autom√°tico para informar\nos detalhes da sua sa√≠da de campo:\n\n"
        
        # Adicionar informa√ß√µes do primeiro local
        if data1:
            mensagem += f"üìç Local 1: {local1}\nüèòÔ∏è Endere√ßo: {endereco1}\nüìç Bairro: {bairro1}\n\nüìÖ Data: {data1}\n‚è∞ Hor√°rio: {horario1}\nüì¢ Campanha: {campanha1} "

        # Adicionar informa√ß√µes do segundo local
        if data2:
            mensagem += f"üìç Local 2: {local2}\nüèòÔ∏è Endere√ßo: {endereco2}\nüìç Bairro: {bairro2}\n\nüìÖ Data: {data2}\n‚è∞ Hor√°rio: {horario2}\nüì¢ Campanha: {campanha2} "

        # Criar fechamento da mensagem
        mensagem += "üòä"

        # Enviar mensagem via WhatsApp
        print(f"Enviando mensagem para {perfil} {nome} ({celular})...")
        kit.sendwhatmsg_instantly(celular, mensagem)
        print(f"Mensagem enviada para {perfil} {nome} ({celular}).")

        # Pausar para evitar erros e fechar a aba do WhatsApp
        time.sleep(5)  # Garantir tempo suficiente para envio
        pyautogui.hotkey('ctrl', 'w')  # Fecha a aba aberta
        print(f"Aba do WhatsApp fechada para {perfil} {nome}.")
        
    except Exception as e:
        print(f"Erro ao processar ou enviar mensagem para {perfil} {nome} ({celular}): {e}")